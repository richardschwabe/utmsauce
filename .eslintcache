[{"F:\\JS\\utmsauce\\src\\index.js":"1","F:\\JS\\utmsauce\\src\\App.js":"2","F:\\JS\\utmsauce\\src\\reportWebVitals.js":"3","F:\\JS\\utmsauce\\src\\components\\PlaceSelector\\PlaceSelector.js":"4","F:\\JS\\utmsauce\\src\\components\\Copyright\\Copyright.js":"5"},{"size":500,"mtime":1609152386618,"results":"6","hashOfConfig":"7"},{"size":3480,"mtime":1610134892199,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609152386618,"results":"9","hashOfConfig":"7"},{"size":914,"mtime":1610136272180,"results":"10","hashOfConfig":"7"},{"size":253,"mtime":1610135098750,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"bqxbax",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"F:\\JS\\utmsauce\\src\\index.js",[],["25","26"],"F:\\JS\\utmsauce\\src\\App.js",["27","28"],"import React, { useState } from \"react\";\n\nimport \"foundation-sites/dist/css/foundation.min.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport dateFormat from \"dateformat\";\n\nimport PlaceSelector from \"./components/PlaceSelector/PlaceSelector\";\nimport Copyright from \"./components/Copyright/Copyright\";\n\nfunction App() {\n  const [startDate, setStartDate] = useState(new Date());\n  const [url, setUrl] = useState(\"\");\n  const [campaignName, setCampaignName] = useState(\"\");\n  const [places, setPlaces] = useState({});\n\n  const [linkList, setLinkList] = useState([]);\n\n  const handleUrlChange = (event) => {\n    setUrl(event.target.value);\n  };\n\n  const handleCampaignChange = (event) => {\n    setCampaignName(event.target.value);\n  };\n\n  const generateLinks = () => {\n    console.log(\"Generating\", url, campaignName);\n    let campaignIdentifierDateString = dateFormat(startDate, \"yyyymmdd\");\n    console.log(campaignIdentifierDateString);\n\n    console.log(\"Original places\", places);\n    let addedPlaces = Object.keys(places).filter((i) => places[i] === 1);\n\n    console.log(addedPlaces);\n\n    let utmStartChar = \"?\";\n    if (url.indexOf(\"?\") > -1) {\n      utmStartChar = \"&\";\n    }\n\n    let newLinkList = [];\n    let urlUTMCampaignPart = `${utmStartChar}utm_campaign=${campaignIdentifierDateString}-${campaignName}`;\n\n    let urls = [];\n    addedPlaces.map((i) => {\n      let splittedItem = i.split(\"-\");\n      let urlUTMSource = splittedItem[0];\n      let urlUTMMedium = splittedItem[1];\n      let finalUrl = `${urlUTMCampaignPart}&utm_source=${urlUTMSource}&utm_medium=${urlUTMMedium}`;\n      urls.push(url + finalUrl);\n    });\n    setLinkList(urls);\n  };\n\n  const toggleSourceMedium = (value) => {\n    const newPlaces = { ...places };\n    if (value in newPlaces) {\n      newPlaces[value] = 0;\n    } else {\n      newPlaces[value] = 1;\n    }\n    setPlaces(newPlaces);\n  };\n\n  return (\n    <div className=\"grid-container\">\n      <h1>URL</h1>\n      <p>Enter URL of the campaign you want users to visit.</p>\n      <div className=\"ui input fluid\">\n        <input\n          onChange={handleUrlChange}\n          value={url}\n          type=\"text\"\n          placeholder=\"URL....\"\n        />\n      </div>\n\n      <h2>What is the campaign name?</h2>\n      <p>Enter the campaign name that you want to use to track.</p>\n      <div className=\"cell small-12 \">\n        <input\n          type=\"text\"\n          placeholder=\"Campaign Name\"\n          value={campaignName}\n          onChange={handleCampaignChange}\n        />\n      </div>\n\n      <h2>When will the campaign run?</h2>\n      <DatePicker\n        selected={startDate}\n        onChange={(date) => setStartDate(date)}\n      />\n\n      <h2>Choose Campaign Source & Medium</h2>\n      <p>\n        Choose any of the source mediums, the links will automatically hold the\n        source and medium settings according to your selection.\n      </p>\n\n      <div className=\"grid-x grid-margin-x\">\n        <PlaceSelector toggleItem={toggleSourceMedium} />\n      </div>\n\n      <button className=\"success button expanded large\" onClick={generateLinks}>\n        Generate\n      </button>\n\n      <h2>Results</h2>\n      {linkList.length > 0 ? (\n        <ul className=\"results\">\n          {linkList.map((item) => (\n            <li>{item}</li>\n          ))}\n        </ul>\n      ) : (\n        <span>Generate some links first...</span>\n      )}\n\n      <Copyright />\n    </div>\n  );\n}\n\nexport default App;\n","F:\\JS\\utmsauce\\src\\reportWebVitals.js",[],"F:\\JS\\utmsauce\\src\\components\\PlaceSelector\\PlaceSelector.js",[],"F:\\JS\\utmsauce\\src\\components\\Copyright\\Copyright.js",["29"],"import React from 'react';\r\n\r\nexport default function Copyright() {\r\n  return (\r\n    <div className=\"copyrightCnt text-center\">\r\n        <a href=\"https://www.richardschwabe.de\" target=\"_blank\">&copy; 2021 - RichardSchwabe.de</a>\r\n      </div>\r\n  );\r\n}\r\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":43,"column":9,"nodeType":"36","messageId":"37","endLine":43,"endColumn":20},{"ruleId":"38","severity":1,"message":"39","line":47,"column":25,"nodeType":"40","messageId":"41","endLine":47,"endColumn":27},{"ruleId":"42","severity":1,"message":"43","line":6,"column":9,"nodeType":"44","endLine":6,"endColumn":65},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'newLinkList' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation"]