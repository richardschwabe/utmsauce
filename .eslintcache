[{"F:\\JS\\utmsauce\\src\\index.js":"1","F:\\JS\\utmsauce\\src\\App.js":"2","F:\\JS\\utmsauce\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":1609152386618,"results":"4","hashOfConfig":"5"},{"size":3617,"mtime":1610083165251,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1609152386618,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"bqxbax",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"F:\\JS\\utmsauce\\src\\index.js",[],["16","17"],"F:\\JS\\utmsauce\\src\\App.js",["18","19"],"import React, { useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport dateFormat from \"dateformat\";\n\nfunction App() {\n  const shareConfig = [\n    {\n      name: \"Facebook\",\n      places: [\"post\", \"story\", \"ad\"],\n    },\n    {\n      name: \"Instagram\",\n      places: [\"story\", \"profile\"],\n    },\n    {\n      name: \"newsletter\",\n      places: [\"main\"],\n    },\n  ];\n\n  const [startDate, setStartDate] = useState(new Date());\n  const [url, setUrl] = useState(\"\");\n  const [campaignName, setCampaignName] = useState(\"\");\n  const [places, setPlaces] = useState({})\n\n  const [linkList, setLinkList] = useState([])\n\n  const handleUrlChange = (event) => {\n    setUrl(event.target.value);\n  };\n\n  const handleCampaignChange = (event) => {\n    setCampaignName(event.target.value);\n  };\n\n  const generateLinks = () => {\n    console.log(\"Generating\", url, campaignName);\n    let campaignIdentifierDateString = dateFormat(startDate, \"yyyymmdd\");\n    console.log(campaignIdentifierDateString);\n    \n    console.log(\"Original places\", places)\n    let addedPlaces = Object.keys(places).filter(i =>  places[i] === 1)\n\n    console.log(addedPlaces);\n\n    let utmStartChar = \"?\"\n    if ( url.indexOf(\"?\") > -1){\n      utmStartChar = \"&\"\n    }\n\n    let newLinkList = []\n    let urlUTMCampaignPart = `${utmStartChar}utm_campaign=${campaignIdentifierDateString}-${campaignName}`\n    \n    let urls = []\n    addedPlaces.map(i => {\n      let splittedItem = i.split(\"-\")\n      let urlUTMSource = splittedItem[0]\n      let urlUTMMedium = splittedItem[1]\n      let finalUrl = `${urlUTMCampaignPart}&utm_source=${urlUTMSource}&utm_medium=${urlUTMMedium}`\n      urls.push(url + finalUrl)\n    })\n    setLinkList(urls)\n  };\n\n  const toggleSourceMedium = (value) => {\n    const newPlaces = {...places}\n    if (value in newPlaces){\n      newPlaces[value] = 0\n    } else {\n      newPlaces[value] = 1\n    }\n    setPlaces(newPlaces)\n  };\n\n  const sharePlaces = shareConfig.map((i) => {\n    let places = i.places.map((place) => {\n      let val = `${i.name.toLowerCase()}-${place.toLowerCase()}`;\n\n      return (\n        <div className=\"inline field\" key={val}>\n          <input type=\"checkbox\" onClick={() => toggleSourceMedium(val)} />\n          <label className=\"ui checkbox\">{place}</label>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"inline field\" key={i.name}>\n        <h3>{i.name}</h3>\n        {places}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"ui container\">\n      <h1>URL</h1>\n      <div className=\"ui input fluid\">\n        <input\n          onChange={handleUrlChange}\n          value={url}\n          type=\"text\"\n          placeholder=\"URL....\"\n        />\n      </div>\n      <h2>What is the campaign name?</h2>\n      <div className=\"ui input fluid\">\n        <input\n          type=\"text\"\n          placeholder=\"Campaign Name\"\n          value={campaignName}\n          onChange={handleCampaignChange}\n        />\n      </div>\n\n      <h2>Choose Campaign Source & Medium</h2>\n      <div className=\"ui form\">{sharePlaces}</div>\n\n      <h2>When will the campaign run?</h2>\n      <DatePicker\n        selected={startDate}\n        onChange={(date) => setStartDate(date)}\n      />\n\n      <h2>Finalise</h2>\n      <button className=\"ui button primary\" onClick={generateLinks}>\n        Generate\n      </button>\n\n      <h2>Results</h2>\n      {linkList.length > 0 ? (\n        <ul className=\"results\">{linkList.map(item => <li>{item}</li>)}</ul>\n      ) : (\n        <span>Generate some links first...</span>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","F:\\JS\\utmsauce\\src\\reportWebVitals.js",[],{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":53,"column":9,"nodeType":"26","messageId":"27","endLine":53,"endColumn":20},{"ruleId":"28","severity":1,"message":"29","line":57,"column":23,"nodeType":"30","messageId":"31","endLine":57,"endColumn":25},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"no-unused-vars","'newLinkList' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]